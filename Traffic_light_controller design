`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////



module Traffic_light_controller(
 input clk, reset,
 output reg [2:0] light_A, light_B, light_C, light_D);
 
parameter STATE1=0, STATE2=1, STATE3=2, STATE4=3, STATE5=4, STATE6=5;
reg [3:0] counter;
reg [2:0] current_state;
parameter sec_7=7, sec_5=5, sec_2=2, sec_3=3;

always @(posedge clk or posedge reset)
  begin
    if(reset)
      begin
        current_state <= STATE1;
        counter <= 0;
      end
    else  
      case(current_state)
        STATE1: if(counter < sec_7)
                  begin
                    current_state <= STATE1;
                    counter <= counter + 1;
                  end
                else
                  begin
                    current_state <= STATE2;
                    counter <= 0;
                  end
        STATE2: if(counter < sec_2)
                  begin
                    current_state <= STATE2;
                    counter <= counter + 1;
                  end  
                else
                  begin 
                    current_state <= STATE3;
                    counter <= 0;
                  end
        STATE3: if(counter < sec_5)
                  begin
                    current_state <= STATE3;
                    counter <= counter + 1;
                  end
                else
                  begin
                    current_state <= STATE4;
                    counter <= 0;    
                  end
        STATE4: if(counter < sec_2)
                  begin
                    current_state <= STATE4;
                    counter <= counter + 1;
                  end
                else
                  begin
                    current_state <= STATE5;
                    counter = 0;
                  end
        STATE5: if(counter < sec_3)
                  begin
                    current_state <= STATE5;
                    counter <= counter + 1;
                  end
                else
                  begin
                    current_state <= STATE6;
                    counter <= 0;
                  end
        STATE6: if(counter <= sec_2)
                  begin
                    current_state <= STATE6;
                    counter <= counter + 1;
                  end
                else
                  begin
                    current_state <= STATE1;
                    counter <= 0;
                  end
      default: current_state <= STATE1;
      endcase
  end                 
                        
always @(current_state)
  begin
     case(current_state)
       STATE1:
          begin
             light_A <= 3'b001;
             light_B <= 3'b001;
             light_C <= 3'b100;
             light_D <= 3'b100;
          end
       STATE2:
          begin
             light_A <= 3'b001;
             light_B <= 3'b010;
             light_C <= 3'b100;
             light_D <= 3'b100;
          end
       STATE3:
          begin
             light_A <= 3'b001;
             light_B <= 3'b100;
             light_C <= 3'b001;
             light_D <= 3'b100;
          end
       STATE4:
          begin
             light_A <= 3'b010;
             light_B <= 3'b100;
             light_C <= 3'b010;
             light_D <= 3'b100;
          end  
       STATE5:
          begin
             light_A <= 3'b100;
             light_B <= 3'b100;
             light_C <= 3'b100;
             light_D <= 3'b001;
          end   
       STATE6:
          begin
             light_A <= 3'b100;
             light_B <= 3'b100;
             light_C <= 3'b100;
             light_D <= 3'b010;
          end
       default:
          begin 
             light_A <= 3'b000;
             light_B <= 3'b000;
             light_C <= 3'b000;
             light_D <= 3'b000;
          end        
     endcase   
  end
endmodule
